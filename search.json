[{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://da-wi.github.io/cartographr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://da-wi.github.io/cartographr/articles/cartographr.html","id":"convert-longitude-latitude-into-a-sf","dir":"Articles","previous_headings":"","what":"Convert longitude / latitude into a sf","title":"Introduction to cartographr","text":"add crime locations dataset map, harness sf (simple features) package, includes lot useful tools working geo data. end, convert dataset sf object using latitude longitude. can achieved function sf::st_as_sf() using coordinates dataset.","code":"crime |> head()"},{"path":"https://da-wi.github.io/cartographr/articles/cartographr.html","id":"setup-the-map-parameters","dir":"Articles","previous_headings":"","what":"Setup the map parameters","title":"Introduction to cartographr","text":"provide longitude, latitude x_distance (.e., width map meters). Furthermore, define extend OSM data meters get_osmdata(). y_distance calculated automatically using output size aspect ratio.","code":"set_output_size(\"A4\", orientation = \"portrait\") osm <- get_osmdata(sf = soho_boundary)"},{"path":"https://da-wi.github.io/cartographr/articles/cartographr.html","id":"plot-the-map","dir":"Articles","previous_headings":"","what":"Plot the map","title":"Introduction to cartographr","text":"plot_map() generates ggplot2 object using color theme set parameter. means can easily adjust plot using ggplot2 commands also add new information map. Now can plot map simply calling print method implicity:","code":"p <- osm |>    crop(soho_boundary) |>    plot_map(palette = \"alphabet\") +   theme_infomap_barlow() +       # Add geom with crimes   geom_point(data = crime,              aes(x = longitude, y = latitude, shape = type), color=\"#A72424\", size=2) +       # Set labels   labs(title = \"CRIME IN SOHO\",        shape = \"TYPE\") p"},{"path":"https://da-wi.github.io/cartographr/articles/cartographr.html","id":"save-map","dir":"Articles","previous_headings":"","what":"Save map","title":"Introduction to cartographr","text":"save_map() can used store print-ready plot object disk drawn object pdf format.","code":"save_map(plot = p, filename = \"ny_crime.pdf\")"},{"path":"https://da-wi.github.io/cartographr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Willinger. Author, maintainer, copyright holder.","code":""},{"path":"https://da-wi.github.io/cartographr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Willinger D (2024). cartographr: Crafting Print-Ready Maps Layered Visualizations. R package version 0.2.1, https://github.com/da-wi/cartographr, https://da-wi.github.io/cartographr.","code":"@Manual{,   title = {cartographr: Crafting Print-Ready Maps and Layered Visualizations},   author = {David Willinger},   year = {2024},   note = {R package version 0.2.1, https://github.com/da-wi/cartographr},   url = {https://da-wi.github.io/cartographr}, }"},{"path":[]},{"path":"https://da-wi.github.io/cartographr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Crafting Print-Ready Maps and Layered Visualizations","text":"Creating maps OpenStreetMap data can complex time-consuming process. syntax designing maps often lacks intuitiveness can vary greatly, making challenging users produce visually appealing, print-ready maps. Additionally, overlaying additional information layers maintaining cartographic aesthetics requires deep understanding spatial data, can detract storytelling aspect map creation. cartographr addresses issues providing lightweight user-friendly interface osmdata ggplot2, streamlining map-making process allowing users concentrate narrative conveyed maps. offers practical adaptable solution transforming geospatial data using simple features (sf) geometries informative, high-quality visualizations, thereby improving dissemination spatial information. Whether ’re involved urban planning, environmental studies, need create impactful public presentations, cartographr designed make work straightforward effective possible.","code":""},{"path":"https://da-wi.github.io/cartographr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Crafting Print-Ready Maps and Layered Visualizations","text":"Simply install github.","code":"devtools::install_github(\"da-wi/cartographr\")"},{"path":"https://da-wi.github.io/cartographr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Crafting Print-Ready Maps and Layered Visualizations","text":"Step 1: Begin determining central point map using WGS84 coordinates. example, ’ll use Vienna’s center latitude 48.210 longitude 16.370. can easily find coordinates online. Step 2: Decide size printed map, A4. help scale text lines map proportionally, matter print size. Step 3: Use get_osmdata() function collect OpenStreetMap data. Set width map area meters using x_distance parameter. leave height (y_distance), calculated based width aspect ratio chosen output size. Step 4: osm variable now contains geometric shapes (like buildings, rivers, parks) appear map. Generate map plot_map() customize look themes color palettes. instance, create infomap Vienna using theme_infomap() choose color scheme (see get_palette()). Step 5: view map, simply call implicit print function.  Step 6: Finally, save map PDF file, ready printing.","code":"set_output_size(c(300,300)) osm <- get_osmdata(48.210, 16.370, x_distance = 1200) plot_vienna <- osm |> plot_map(palette = \"serene\") +   theme_infomap() +   ggplot2::labs(title = \"VIENNA\") plot_vienna save_map(plot = plot_vienna, filename=\"vienna.pdf\")"},{"path":"https://da-wi.github.io/cartographr/index.html","id":"palette-overview","dir":"","previous_headings":"","what":"Palette overview","title":"Crafting Print-Ready Maps and Layered Visualizations","text":"Load OpenStreetMap (OSM) data Hamburg, Germany. Create tibble df_pal contains list palette names. , use row-wise operation apply palette map data (osm) store resulting plot object.","code":"hamburg <- get_osmdata(lat = 53.545, lon = 10.000, x_distance = 1200) df_pal <- tibble (palettes= c(\"alphabet\", \"arctic\",\"autumn\", \"bw\",                         \"evening\", \"gray\", \"iberia\", \"imhof\",\"lines\",\"midnight\",                         \"minimal\",\"metropolitan\",\"serene\",\"swiss\",\"tropical\"),                   hamburg = list(hamburg)) |>   rowwise() |>   mutate(p = list(hamburg |> plot_map(palettes) + theme_infomap() + labs(title = palettes)))"},{"path":"https://da-wi.github.io/cartographr/index.html","id":"data-licensing","dir":"","previous_headings":"","what":"Data licensing","title":"Crafting Print-Ready Maps and Layered Visualizations","text":"data access using cartographr , consequence, osmdata licensed OpenStreetMap’s license, Open Database Licence. derived data products must also carry licence. make sure understand licence publishing derived datasets.","code":""},{"path":"https://da-wi.github.io/cartographr/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Crafting Print-Ready Maps and Layered Visualizations","text":"encounter clear bug, please file issue minimal reproducible example GitHub.","code":""},{"path":"https://da-wi.github.io/cartographr/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Crafting Print-Ready Maps and Layered Visualizations","text":"development project drew inspiration prettymaps project.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/crime.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan crime dataset — crime","title":"Manhattan crime dataset — crime","text":"dataset encompasses reported felony, misdemeanor, violation crimes recorded New York City Police Department (NYPD) borough Manhattan, starting year 2004. data sourced public domain available analysis research purposes. provides comprehensive overview crime patterns can utilized developing crime prevention strategies, conducting sociological research, enhancing public awareness.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/crime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan crime dataset — crime","text":"","code":"crime"},{"path":"https://da-wi.github.io/cartographr/reference/crime.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Manhattan crime dataset — crime","text":"data frame columns representing various attributes crimes type, location, date, time.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/crime.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Manhattan crime dataset — crime","text":"New York City Police Department (NYPD) https://catalog.data.gov/","code":""},{"path":"https://da-wi.github.io/cartographr/reference/crop.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop a preprocessed map — crop","title":"Crop a preprocessed map — crop","text":"function crops OpenStreetMap (OSM) object preprocessed. supports different types geometric boundaries rectangles, circles, hexagons, custom boundary provided 'sf' object.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/crop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop a preprocessed map — crop","text":"","code":"crop(osm, boundary = \"rect\")"},{"path":"https://da-wi.github.io/cartographr/reference/crop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crop a preprocessed map — crop","text":"osm preprocessed OSM object crop applied. boundary type geometric boundary apply OSM data. Can \"rect\" rectangular boundary, \"circle\" circular boundary, \"hex\" hexagonal boundary, 'sf' object custom boundary. Default \"rect\".","code":""},{"path":"https://da-wi.github.io/cartographr/reference/crop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crop a preprocessed map — crop","text":"OSM object specified geometric crop applied.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/crop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crop a preprocessed map — crop","text":"OSM object preprocessed, function call preprocess_map() preprocess data applying cropping. type preprocessing applied stored OSM object's metadata.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/crop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crop a preprocessed map — crop","text":"","code":"# \\donttest{ data(\"osm\") # Apply a circular crop osm_circle_cropped <- osm |> crop(boundary = \"circle\") # }"},{"path":"https://da-wi.github.io/cartographr/reference/get_osmdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve OpenStreetMap Data — get_osmdata","title":"Retrieve OpenStreetMap Data — get_osmdata","text":"function retrieves OpenStreetMap (OSM) data based geographic coordinates bounding box. allows specification distances aspect ratios define area interest. function can return data simple features (sf) format options operate quietly.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_osmdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve OpenStreetMap Data — get_osmdata","text":"","code":"get_osmdata(   lat = NULL,   lon = NULL,   x_distance = NULL,   y_distance = NULL,   aspect_ratio = NULL,   bbox = NULL,   sf = NULL,   quiet = F,   keep = F )"},{"path":"https://da-wi.github.io/cartographr/reference/get_osmdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve OpenStreetMap Data — get_osmdata","text":"lat Latitude center point (optional bbox sf provided). lon Longitude center point (optional bbox sf provided). x_distance Distance x-direction center point (optional). y_distance Distance y-direction center point (optional). aspect_ratio Aspect ratio x y distances (optional). bbox bounding box define area interest (optional lat, lon, distances provided). sf sf object define area interest (optional bbox provided). quiet Logical flag suppress progress messages. keep Logical flag additional OSM data kept.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_osmdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve OpenStreetMap Data — get_osmdata","text":"list containing various elements OSM data, including street networks, buildings, water bodies, green areas, beaches, parking areas, railways, bounding box retrieved area.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_osmdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve OpenStreetMap Data — get_osmdata","text":"function performs checks ensure correct combination parameters provided. calculates bounding box provided retrieves various OSM features within specified area.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_osmdata.html","id":"exported-features","dir":"Reference","previous_headings":"","what":"Exported Features","title":"Retrieve OpenStreetMap Data — get_osmdata","text":"following table lists OSM features retrieved function: Note: * tags retrieved","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_osmdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve OpenStreetMap Data — get_osmdata","text":"","code":"# \\donttest{ osm_data <- get_osmdata(lat=44.568611, lon=15.331389, x_distance=100) #> ℹ Retrieving data, be patient, on public servers it can last up to one minute #> ℹ xmin:15.33, ymin:44.57, xmax:15.33, ymax:44.57 #> ✔ Complete. # }"},{"path":"https://da-wi.github.io/cartographr/reference/get_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a palette for maps — get_palette","title":"Create a palette for maps — get_palette","text":"function creates color theme used plot_map(). can accept predefined palette name custom palette provided named list.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a palette for maps — get_palette","text":"","code":"get_palette(palette)"},{"path":"https://da-wi.github.io/cartographr/reference/get_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a palette for maps — get_palette","text":"palette color palette use. Can one \"alphabet\", \"arctic\", \"autumn\", \"autumn-muted\", \"bw\", \"desert\", \"evening\", \"gray\", \"iberia\", \"imhof\", \"lines\", \"metropolitan\", \"midnight\", \"minimal\", \"swiss\", \"tropical\", named list custom palette. named list provided, contain color hex codes map element. NULL unrecognized name provided, function throw error.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a palette for maps — get_palette","text":"list containing color settings map elements.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a palette for maps — get_palette","text":"color moods predefined palettes described follows: Alphabet: modern palette straightforward aesthetic. Arctic: palette reflects clear bright qualities Arctic landscapes. Autumn: palette warm varied hues typical fall season. BW: classic black white palette hint warmth traditional feel. Evening: palette embodies quiet contemplative nature dusk. Gray: balanced palette provides composed refined look. Iberia: palette reflects warm diverse tones associated Iberian landscape. Imhof: palette natural subdued tones, inspired work cartographer Eduard Imhof. Lines (BW): contrasting black white palette clear defined appearance. Metropolitan: palette understated tones suggest urban sophistication. Midnight: palette conveys depth tranquility night. Minimal: palette focused minimalism, utilizing primarily whites light grays. Serene: palette embodies peace simplicity, utilizing soft color scheme gentle contrasts. Swiss: palette emphasizes cleanliness precision, reminiscent Swiss design. Tropical: lively palette bright bold colors characteristic tropical areas. addition, can customize settings: border_color: color borders, set dark shade \"#121212\". border_width: width borders, set fine line 0.001 units. linewidth_buildings: line width building outlines, set 0.05 units. linewidth_motorway, linewidth_trunk, linewidth_primary, linewidth_secondary, linewidth_tertiary, linewidth_unclassified, linewidth_residential: line widths various types roads, ranging 6 units motorways 1 unit pedestrian paths. size_streetlamp: size representation streetlamps, set 0.2 units. hatch_*: series settings hatching patterns, can applied water, buildings, green spaces. include toggles hatching (hatch_water, hatch_buildings, hatch_green), number points lines (hatch_*_npoints, hatch_*_nlines), type hatching pattern (hatch_*_type), size hatching elements (hatch_*_size), transparency level (hatch_*_alpha). settings allow high degree customization creating maps, providing users ability fine-tune appearance map elements according specific needs preferences.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/get_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a palette for maps — get_palette","text":"","code":"# Use predefined palette get_palette(\"imhof\") #> $name #> [1] \"imhof\" #>  #> $border_color #> [1] \"#121212\" #>  #> $border_width #> [1] 0.001 #>  #> $linewidth_buildings #> [1] 0.05 #>  #> $linewidth_motorway #> [1] 6 #>  #> $linewidth_trunk #> [1] 6 #>  #> $linewidth_primary #> [1] 4 #>  #> $linewidth_secondary #> [1] 4 #>  #> $linewidth_tertiary #> [1] 3 #>  #> $linewidth_unclassified #> [1] 3 #>  #> $linewidth_residential #> [1] 3 #>  #> $linewidth_pedestrian #> [1] 1 #>  #> $linewidth_service #> [1] 1 #>  #> $linewidth_living_street #> [1] 1 #>  #> $size_streetlamp #> [1] 0.2 #>  #> $hatch_water #> [1] FALSE #>  #> $hatch_water_npoints #> [1] 200 #>  #> $hatch_water_nlines #> [1] 100 #>  #> $hatch_water_type #> [1] \"points\" #>  #> $hatch_water_size #> [1] 1 #>  #> $hatch_water_alpha #> [1] 0.1 #>  #> $hatch_buildings #> [1] FALSE #>  #> $hatch_buildings_npoints #> [1] 200 #>  #> $hatch_buildings_nlines #> [1] 100 #>  #> $hatch_buildings_type #> [1] \"points\" #>  #> $hatch_buildings_size #> [1] 1 #>  #> $hatch_buildings_alpha #> [1] 0.1 #>  #> $hatch_green #> [1] FALSE #>  #> $hatch_green_npoints #> [1] 200 #>  #> $hatch_green_nlines #> [1] 100 #>  #> $hatch_green_type #> [1] \"lines\" #>  #> $hatch_green_size #> [1] 1 #>  #> $hatch_green_alpha #> [1] 0.1 #>  #> $palette_building #> [1] \"#7e6e55\" \"#9c8c6e\" \"#6a5944\" #>  #> $railway #> [1] \"#a35e48\" #>  #> $green #> [1] \"#c5d1a5\" #>  #> $water #> [1] \"#9dbcd4\" #>  #> $background #> [1] \"#f3efe2\" #>  #> $street #> [1] \"#b0a18f\" #>  #> $beach #> [1] \"#e2d1b3\" #>  #> $parking #> [1] \"#a9a18c\" #>  #> attr(,\"class\") #> [1] \"cartographr_palette\"  # Custom palette creation using a named list for a simple black and white palette custom_palette <- list(   palette_building = c(\"#000000\", \"#FFFFFF\", \"#CCCCCC\"),   water = \"#000000\",   green = \"#FFFFFF\",   beach = \"#000000\",   parking = \"#FFFFFF\",   street = \"#000000\",   background = \"#CCCCCC\",   railway = \"#000000\",   hatch_water = TRUE,   linewidth_buildings = 0.05,   linewidth_motorway = 6,   linewidth_primary = 4,   linewidth_secondary = 4,   linewidth_tertiary=3,   linewidth_unclassified = 3,   linewidth_residential = 3,   linewidth_pedestrian = 1,   linewidth_service = 1,   linewidth_living_street = 1,   size_hatch = 1,   alpha_hatch = 0.1,   size_streetlamp = 0.2 )  get_palette(custom_palette) #> $name #> [1] \"custom\" #>  #> $border_color #> [1] \"#121212\" #>  #> $border_width #> [1] 0.001 #>  #> $linewidth_buildings #> [1] 0.05 #>  #> $linewidth_motorway #> [1] 6 #>  #> $linewidth_trunk #> [1] 6 #>  #> $linewidth_primary #> [1] 4 #>  #> $linewidth_secondary #> [1] 4 #>  #> $linewidth_tertiary #> [1] 3 #>  #> $linewidth_unclassified #> [1] 3 #>  #> $linewidth_residential #> [1] 3 #>  #> $linewidth_pedestrian #> [1] 1 #>  #> $linewidth_service #> [1] 1 #>  #> $linewidth_living_street #> [1] 1 #>  #> $size_streetlamp #> [1] 0.2 #>  #> $hatch_water #> [1] TRUE #>  #> $hatch_water_npoints #> [1] 200 #>  #> $hatch_water_nlines #> [1] 100 #>  #> $hatch_water_type #> [1] \"points\" #>  #> $hatch_water_size #> [1] 1 #>  #> $hatch_water_alpha #> [1] 0.1 #>  #> $hatch_buildings #> [1] FALSE #>  #> $hatch_buildings_npoints #> [1] 200 #>  #> $hatch_buildings_nlines #> [1] 100 #>  #> $hatch_buildings_type #> [1] \"points\" #>  #> $hatch_buildings_size #> [1] 1 #>  #> $hatch_buildings_alpha #> [1] 0.1 #>  #> $hatch_green #> [1] FALSE #>  #> $hatch_green_npoints #> [1] 200 #>  #> $hatch_green_nlines #> [1] 100 #>  #> $hatch_green_type #> [1] \"lines\" #>  #> $hatch_green_size #> [1] 1 #>  #> $hatch_green_alpha #> [1] 0.1 #>  #> $palette_building #> [1] \"#000000\" \"#FFFFFF\" \"#CCCCCC\" #>  #> $water #> [1] \"#000000\" #>  #> $green #> [1] \"#FFFFFF\" #>  #> $beach #> [1] \"#000000\" #>  #> $parking #> [1] \"#FFFFFF\" #>  #> $street #> [1] \"#000000\" #>  #> $background #> [1] \"#CCCCCC\" #>  #> $railway #> [1] \"#000000\" #>  #> $size_hatch #> [1] 1 #>  #> $alpha_hatch #> [1] 0.1 #>  #> attr(,\"class\") #> [1] \"cartographr_palette\""},{"path":"https://da-wi.github.io/cartographr/reference/osm.html","id":null,"dir":"Reference","previous_headings":"","what":"OSM SoHo New York simple features — osm","title":"OSM SoHo New York simple features — osm","text":"dataset contains Simple Features (sf) representation Soho, New York. includes various geographical spatial attributes relevant area.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OSM SoHo New York simple features — osm","text":"","code":"osm"},{"path":"https://da-wi.github.io/cartographr/reference/osm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OSM SoHo New York simple features — osm","text":"named list objects class sf rows columns corresponding features attributes.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/osm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"OSM SoHo New York simple features — osm","text":"OpenStreetMap","code":""},{"path":"https://da-wi.github.io/cartographr/reference/osm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OSM SoHo New York simple features — osm","text":"","code":"data(\"osm\")"},{"path":"https://da-wi.github.io/cartographr/reference/plot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a map with custom palette — plot_map","title":"Plot a map with custom palette — plot_map","text":"function takes 'osmdata' (osm) object palette name, preprocesses map data already done, plots map using 'ggplot2' specified color palette.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/plot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a map with custom palette — plot_map","text":"","code":"plot_map(...)"},{"path":"https://da-wi.github.io/cartographr/reference/plot_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a map with custom palette — plot_map","text":"... Variable argument list: osm: list retrieved osmdata containing map data. palette: character string specifying name palette use. default \"imhof\". Additional arguments passed preprocessing plotting functions.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/plot_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a map with custom palette — plot_map","text":"ggplot object representing map chosen palette.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/plot_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a map with custom palette — plot_map","text":"","code":"data(\"osm\") my_map <- osm |> plot_map(palette = 'gray')"},{"path":"https://da-wi.github.io/cartographr/reference/preprocess_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess OSM Data — preprocess_map","title":"Preprocess OSM Data — preprocess_map","text":"function preprocesses OpenStreetMap (OSM) data analysis visualization. filters organizes data related streets, railways, buildings, water bodies, green areas, beaches, parking areas.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/preprocess_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess OSM Data — preprocess_map","text":"","code":"preprocess_map(osm)"},{"path":"https://da-wi.github.io/cartographr/reference/preprocess_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess OSM Data — preprocess_map","text":"osm list containing OSM data elements.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/preprocess_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess OSM Data — preprocess_map","text":"list preprocessed OSM data elements, including streets, railways, buildings, water bodies, green areas, beaches, parking areas, separate list elements. Also includes combined multipolygon water, buildings, green areas plotting.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/preprocess_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preprocess OSM Data — preprocess_map","text":"function performs following steps: Filters streets based specified highway types. Filters railway lines. Filters building polygons multipolygons. Filters water bodies sea areas using multiple criteria. Filters green areas based land use natural features. Filters beach areas based natural features. Filters parking areas based amenities, highways, man-made features. Combines multiple polygons single multipolygon water, buildings, green areas. returns original OSM list additional elements category data combined multipolygons easy plotting.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/preprocess_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess OSM Data — preprocess_map","text":"","code":"data(\"osm\") preprocessed_osm <- osm |> preprocess_map()"},{"path":"https://da-wi.github.io/cartographr/reference/print_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Print configuration details — print_config","title":"Print configuration details — print_config","text":"function prints configuration details stored current environment. iterates variables environment displays names values.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/print_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print configuration details — print_config","text":"","code":"print_config()"},{"path":"https://da-wi.github.io/cartographr/reference/print_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print configuration details — print_config","text":"function return value; prints configuration details.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/print_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print configuration details — print_config","text":"","code":"print_config() #> ℹ attribution: TRUE #> ℹ orientation: portrait #> ℹ output_size: 210 297 #> ℹ scale_factor: 0.2497607"},{"path":"https://da-wi.github.io/cartographr/reference/save_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a map to a file — save_map","title":"Save a map to a file — save_map","text":"function saves ggplot object file using specified filename. checks orientation setting warns scale factor changed plot created.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/save_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a map to a file — save_map","text":"","code":"save_map(plot, filename, device = \"pdf\")"},{"path":"https://da-wi.github.io/cartographr/reference/save_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a map to a file — save_map","text":"plot ggplot object representing map saved. filename character string specifying path name file save plot . device output device defaulting pdf","code":""},{"path":"https://da-wi.github.io/cartographr/reference/save_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a map to a file — save_map","text":"function saves plot file return anything.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/save_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a map to a file — save_map","text":"","code":"# \\donttest{ data(\"osm\") my_map <- osm |> plot_map() filename <- tempfile(fileext =  \".pdf\") save_map(my_map, filename) unlink(filename) # }"},{"path":"https://da-wi.github.io/cartographr/reference/set_attribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get attribution setting — set_attribution","title":"Set or get attribution setting — set_attribution","text":"function sets new value attribution setting cartographr environment retrieves current setting argument provided.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/set_attribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get attribution setting — set_attribution","text":"","code":"set_attribution(attribution = NULL)"},{"path":"https://da-wi.github.io/cartographr/reference/set_attribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get attribution setting — set_attribution","text":"attribution logical value set acknowledgments setting. NULL, current setting returned. default NULL.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/set_attribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or get attribution setting — set_attribution","text":"attribution NULL, returns current acknowledgments setting. attribution logical value, function set acknowledgments setting value return invisibly.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/set_attribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or get attribution setting — set_attribution","text":"","code":"# To get the current acknowledgments setting set_attribution() #> [1] TRUE  # To set the acknowledgments setting to TRUE set_attribution(TRUE)"},{"path":"https://da-wi.github.io/cartographr/reference/set_output_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Set output size for maps — set_output_size","title":"Set output size for maps — set_output_size","text":"function sets output size cartographic displays. allows user specify standard paper size custom dimensions. size specified, returns current output size.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/set_output_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set output size for maps — set_output_size","text":"","code":"set_output_size(size = NULL, orientation = \"portrait\")"},{"path":"https://da-wi.github.io/cartographr/reference/set_output_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set output size for maps — set_output_size","text":"size character string specifying standard paper size numeric vector custom dimensions (width, height). standard sizes can one \"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"small_poster\", \"medium_poster\", \"large_poster\". size NULL, current output size returned. orientation orientation output","code":""},{"path":"https://da-wi.github.io/cartographr/reference/set_output_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set output size for maps — set_output_size","text":"size NULL, returns current output size numeric vector. size specified, function sets output size..","code":""},{"path":"https://da-wi.github.io/cartographr/reference/set_output_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set output size for maps — set_output_size","text":"","code":"set_output_size(\"A3\") # Sets the output size to A3 dimensions set_output_size(c(300, 200)) # Sets a custom output size"},{"path":"https://da-wi.github.io/cartographr/reference/soho_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"SoHo Boundary Simple Features Vector — soho_boundary","title":"SoHo Boundary Simple Features Vector — soho_boundary","text":"dataset represents Simple Features vector MN24 region New York, specifically covering SoHo neighborhood. includes spatial boundaries relevant geographical attributes.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/soho_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SoHo Boundary Simple Features Vector — soho_boundary","text":"","code":"soho_boundary"},{"path":"https://da-wi.github.io/cartographr/reference/soho_boundary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SoHo Boundary Simple Features Vector — soho_boundary","text":"object class sf (inherits data.frame), representing SoHo boundary spatial attributes.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/soho_boundary.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SoHo Boundary Simple Features Vector — soho_boundary","text":"https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html","code":""},{"path":"https://da-wi.github.io/cartographr/reference/soho_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SoHo Boundary Simple Features Vector — soho_boundary","text":"","code":"data(soho_boundary)"},{"path":"https://da-wi.github.io/cartographr/reference/theme_infomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply infomap theme with specified font — theme_infomap","title":"Apply infomap theme with specified font — theme_infomap","text":"function applies custom theme information maps, allowing user specify font predefined list. sets various ggplot2 theme elements title, subtitle, caption, legend use specified font adjusts appearance based scale factor.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/theme_infomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply infomap theme with specified font — theme_infomap","text":"","code":"theme_infomap(font = \"Poppins\")  theme_infomap_anton()  theme_infomap_poppins()  theme_infomap_cinzel()  theme_infomap_barlow()"},{"path":"https://da-wi.github.io/cartographr/reference/theme_infomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply infomap theme with specified font — theme_infomap","text":"font character string specifying font use theme elements. default \"Poppins\". \"Poppins\", \"Anton\", \"Cinzel\", \"Barlow\" valid options.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/theme_infomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply infomap theme with specified font — theme_infomap","text":"'ggplot2' theme object information map theme settings applied.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/theme_infomap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply infomap theme with specified font — theme_infomap","text":"theme_infomap_poppins(), theme_infomap_anton() aliases theme_infomap(\"Poppins\"), etc.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/theme_infomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply infomap theme with specified font — theme_infomap","text":"","code":"data(\"osm\") my_map <- osm |> plot_map() +  theme_infomap_poppins()"},{"path":"https://da-wi.github.io/cartographr/reference/theme_poster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a poster theme — theme_poster","title":"Create a poster theme — theme_poster","text":"function generates 'ggplot2' theme resembles poster style. designed used 'ggplot2' plots provide clean bold aesthetic suitable poster visuals.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/theme_poster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a poster theme — theme_poster","text":"","code":"theme_poster(font = \"Poppins\")  theme_poster_poppins()  theme_poster_anton()  theme_poster_cinzel()  theme_poster_barlow()"},{"path":"https://da-wi.github.io/cartographr/reference/theme_poster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a poster theme — theme_poster","text":"font font family used text elements plot. default font set \"Poppins\".","code":""},{"path":"https://da-wi.github.io/cartographr/reference/theme_poster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a poster theme — theme_poster","text":"'ggplot2' theme object can added 'ggplot2' plotting calls.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/theme_poster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a poster theme — theme_poster","text":"theme_poster_poppins(), theme_poster_anton() aliases theme_poster(\"Poppins\"), etc.","code":""},{"path":"https://da-wi.github.io/cartographr/reference/theme_poster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a poster theme — theme_poster","text":"","code":"data(\"osm\") my_map <- osm |> plot_map() +  theme_poster()"},{"path":"https://da-wi.github.io/cartographr/news/index.html","id":"cartographr-021","dir":"Changelog","previous_headings":"","what":"cartographr 0.2.1","title":"cartographr 0.2.1","text":"New palette minor bug fixes Timeout issues get_osmdata() fixed","code":""},{"path":"https://da-wi.github.io/cartographr/news/index.html","id":"cartographr-020","dir":"Changelog","previous_headings":"","what":"cartographr 0.2.0","title":"cartographr 0.2.0","text":"Added unit tests Added crop functionality Added hatch functionality Added theme options Reworked code fewer dependencies","code":""},{"path":"https://da-wi.github.io/cartographr/news/index.html","id":"cartographr-01","dir":"Changelog","previous_headings":"","what":"cartographr 0.1","title":"cartographr 0.1","text":"Initial release github","code":""}]
